#
# Copyright 2015 VMware, Inc.  All rights reserved.
# SPDX-License-Identifier: Apache-2.0 OR GPL-3.0-only
#
---
- name: Check if Vrb Instance exists
  ignore_errors: yes
  local_action:
    module: vcenter_query
    host: "{{ mgmt_vc }}"
    login: "{{ mgmt_vc_username }}"
    password: "{{ mgmt_vc_password }}"
    port: "{{ mgmt_vc_port }}"
    resourcename: "{{ vrealizeb_name }}"
    resourcevarname: "{{vrealizeb_name }}"
    resourcetype: 'vm'
  register: vrb_exists

- name: debug checking vra Instance if exists
  debug: var=vrb_exists
  when: vrb_exists.changed is defined

- name: Destroying existing appliance
  ignore_errors: True
  vsphere_guest:
    vcenter_hostname: "{{ mgmt_vc }}"
    username: "{{ mgmt_vc_username }}"
    password: "{{ mgmt_vc_password }}"
    guest: "{{ vrealizeb_name }}"
    state: absent
    force: yes
  register: vrb_deleted
  when: vrb_exists.changed is defined and "{{vrb_delete}}"== "1"

- name: debug delete instance
  debug: var=vrb_deleted

- name: deploy VRB OVA
  shell: >
    {{ ovftool }}
    '--name={{ vrealizeb_name }}'
    --acceptAllEulas
    --allowExtraConfig
    --noSSLVerify
    --diskMode=thin
    '--datastore={{vrealizeb_datastore}}'
    '--network={{vrealizeb_network}}'
    '--prop:itfm_root_password={{vrealizeb_itfm_root_password }}'
    '--prop:itfm_ssh_enabled={{ vrb_ssh_enabled }}'
    '--prop:vami.gateway.vRealize_Business_Standard={{ vrb_gateway_address }}'
    '--prop:vami.DNS.vRealize_Business_Standard={{ vrb_dns_server1 }}'
    '--prop:vami.ip0.vRealize_Business_Standard={{ vrb_ip_address }}'
    '--prop:vami.netmask0.vRealize_Business_Standard={{ vrb_ip_netmask }}'
    '{{vrealizeb_ova_location }}/{{vrealizeb_ova}}'
    'vi://{{ mgmt_vc_username | urlencode }}:{{ mgmt_vc_password | urlencode }}@{{ mgmt_vc }}:443/{{ mgmt_vc_datacenter }}/host/{{ mgmt_vc_cluster }}'
  tags:
    - ova
  register: vrb_ova_deploy
  when: not vrb_exists.changed is defined or vrb_deleted.changed

- name: Check if Vra Instance is created in vcenter
  ignore_errors: yes
  local_action:
    module: vcenter_query
    host: "{{ mgmt_vc }}"
    login: "{{ mgmt_vc_username }}"
    password: "{{ mgmt_vc_password }}"
    port: "{{ mgmt_vc_port }}"
    resourcename: "{{ vrealizeb_name }}"
    resourcevarname: "{{vrealizeb_name }}"
    resourcetype: 'vm'
  register: vrb_created
  when: not vrb_exists.changed is defined or vrb_deleted.changed

- name: debug checking vrb Instance is created
  debug: var=vrb_created

- name: Start vrb
  vsphere_guest:
    vcenter_hostname: "{{ mgmt_vc }}"
    username: "{{ mgmt_vc_username }}"
    password: "{{ mgmt_vc_password }}"
    guest: "{{ vrealizeb_name }}"
    state: powered_on
    force: yes
  register: vrb_started
  when: (not vrb_exists.changed is defined or vrb_deleted.changed)and "{{vrb_poweron}}"== "1"

- name: debug checking vrb Instance is created
  debug: var=vrb_started
